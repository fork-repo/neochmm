!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CalNormalProbability	.\gmm.cpp	/^double GMM::CalNormalProbability(const double* v, int index)$/;"	f	class:GMM
Cluster	.\libKMeans.cpp	/^void KMeans::Cluster(double *data, int size, int *Label)$/;"	f	class:KMeans
Distance	.\libKMeans.cpp	/^double KMeans::Distance(const double* v1, const double* v2, int dimensionNumber)$/;"	f	class:KMeans
GMM	.\gmm.cpp	/^GMM::GMM(int dimensionNumber, int mixtureNumber)$/;"	f	class:GMM
GMM	.\gmm.h	/^class GMM$/;"	c
GetMean	.\KMeans.h	/^	double* GetMean(int index)	{ return m_means[index]; }$/;"	f	class:KMeans
GetProbability	.\gmm.cpp	/^double GMM::GetProbability(const double* v)$/;"	f	class:GMM
KMeans	.\KMeans.h	/^class KMeans$/;"	c
KMeans	.\libKMeans.cpp	/^KMeans::KMeans(int dimensionNumber, int clusterNumber, double endCondition)$/;"	f	class:KMeans
PredictLabel	.\libKMeans.cpp	/^double KMeans::PredictLabel(double* v1, int* ppredict_label)$/;"	f	class:KMeans
PrintGMM	.\gmm.cpp	/^void GMM::PrintGMM()$/;"	f	class:GMM
PrintMeans	.\libKMeans.cpp	/^void KMeans::PrintMeans()$/;"	f	class:KMeans
TrainSingleGaussianDistribution	.\gmm.cpp	/^void GMM::TrainSingleGaussianDistribution(double *data, int size)$/;"	f	class:GMM
WIN	.\win.cpp	/^WIN::WIN()$/;"	f	class:WIN
WIN	.\win.h	/^class WIN$/;"	c
m_clusterNumber	.\KMeans.h	/^	int m_clusterNumber; $/;"	m	class:KMeans
m_dimensionNumber	.\KMeans.h	/^	int m_dimensionNumber; $/;"	m	class:KMeans
m_dimensionNumber	.\gmm.h	/^	int m_dimensionNumber; \/\/$/;"	m	class:GMM
m_dimensionNumber	.\win.h	/^	int m_dimensionNumber; \/\/$/;"	m	class:WIN
m_endCondition	.\KMeans.h	/^	double m_endCondition;$/;"	m	class:KMeans
m_means	.\KMeans.h	/^	double **m_means;$/;"	m	class:KMeans
m_means	.\gmm.h	/^	double** m_means;$/;"	m	class:GMM
m_means	.\win.h	/^	double** m_means;$/;"	m	class:WIN
m_mixtureNumber	.\gmm.h	/^	int m_mixtureNumber; \/\/$/;"	m	class:GMM
m_mixtureNumber	.\win.h	/^	int m_mixtureNumber; \/\/$/;"	m	class:WIN
m_priors	.\gmm.h	/^	double* m_priors; \/\/ weight$/;"	m	class:GMM
m_priors	.\win.h	/^	double* m_priors; \/\/ weight$/;"	m	class:WIN
m_variance	.\win.h	/^	double** m_variance;$/;"	m	class:WIN
m_variances	.\gmm.h	/^	double** m_variances;$/;"	m	class:GMM
main	.\main.cpp	/^int main(int argc, char** argv)$/;"	f
~GMM	.\gmm.cpp	/^GMM::~GMM()$/;"	f	class:GMM
~KMeans	.\libKMeans.cpp	/^KMeans::~KMeans()$/;"	f	class:KMeans
~WIN	.\win.cpp	/^WIN::~WIN()$/;"	f	class:WIN
